//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.WCFService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfficeProductsRepresent", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
    [System.SerializableAttribute()]
    public partial class OfficeProductsRepresent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfficeRepresent", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
    [System.SerializableAttribute()]
    public partial class OfficeRepresent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRepresent", Namespace="http://schemas.datacontract.org/2004/07/WCFLibrary")]
    [System.SerializableAttribute()]
    public partial class ProductRepresent : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFService.IWCFService", CallbackContract=typeof(Test.WCFService.IWCFServiceCallback))]
    public interface IWCFService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/Connect", ReplyAction="http://tempuri.org/IWCFService/ConnectResponse")]
        int Connect();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/Connect", ReplyAction="http://tempuri.org/IWCFService/ConnectResponse")]
        System.Threading.Tasks.Task<int> ConnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/Disconnect", ReplyAction="http://tempuri.org/IWCFService/DisconnectResponse")]
        void Disconnect(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/Disconnect", ReplyAction="http://tempuri.org/IWCFService/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindProductsByOffice", ReplyAction="http://tempuri.org/IWCFService/FindProductsByOfficeResponse")]
        Test.WCFService.OfficeProductsRepresent[] FindProductsByOffice(string orgName, string officeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindProductsByOffice", ReplyAction="http://tempuri.org/IWCFService/FindProductsByOfficeResponse")]
        System.Threading.Tasks.Task<Test.WCFService.OfficeProductsRepresent[]> FindProductsByOfficeAsync(string orgName, string officeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindOrgs", ReplyAction="http://tempuri.org/IWCFService/FindOrgsResponse")]
        Test.WCFService.OfficeRepresent[] FindOrgs(int id, string orgName, string orgType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindOrgs", ReplyAction="http://tempuri.org/IWCFService/FindOrgsResponse")]
        System.Threading.Tasks.Task<Test.WCFService.OfficeRepresent[]> FindOrgsAsync(int id, string orgName, string orgType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewOffice", ReplyAction="http://tempuri.org/IWCFService/CreateNewOfficeResponse")]
        void CreateNewOffice(int id, Test.WCFService.OfficeRepresent officeRepresent, Test.WCFService.OfficeRepresent to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewOffice", ReplyAction="http://tempuri.org/IWCFService/CreateNewOfficeResponse")]
        System.Threading.Tasks.Task CreateNewOfficeAsync(int id, Test.WCFService.OfficeRepresent officeRepresent, Test.WCFService.OfficeRepresent to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddProductToOffice", ReplyAction="http://tempuri.org/IWCFService/AddProductToOfficeResponse")]
        void AddProductToOffice(int id, Test.WCFService.OfficeProductsRepresent[] officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddProductToOffice", ReplyAction="http://tempuri.org/IWCFService/AddProductToOfficeResponse")]
        System.Threading.Tasks.Task AddProductToOfficeAsync(int id, Test.WCFService.OfficeProductsRepresent[] officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewProduct", ReplyAction="http://tempuri.org/IWCFService/CreateNewProductResponse")]
        void CreateNewProduct(int id, Test.WCFService.ProductRepresent productRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewProduct", ReplyAction="http://tempuri.org/IWCFService/CreateNewProductResponse")]
        System.Threading.Tasks.Task CreateNewProductAsync(int id, Test.WCFService.ProductRepresent productRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteProductFromOffice", ReplyAction="http://tempuri.org/IWCFService/DeleteProductFromOfficeResponse")]
        void DeleteProductFromOffice(int id, Test.WCFService.OfficeProductsRepresent officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteProductFromOffice", ReplyAction="http://tempuri.org/IWCFService/DeleteProductFromOfficeResponse")]
        System.Threading.Tasks.Task DeleteProductFromOfficeAsync(int id, Test.WCFService.OfficeProductsRepresent officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteOffice", ReplyAction="http://tempuri.org/IWCFService/DeleteOfficeResponse")]
        void DeleteOffice(int id, Test.WCFService.OfficeRepresent officeRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteOffice", ReplyAction="http://tempuri.org/IWCFService/DeleteOfficeResponse")]
        System.Threading.Tasks.Task DeleteOfficeAsync(int id, Test.WCFService.OfficeRepresent officeRepresent);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewOfficeCallback", ReplyAction="http://tempuri.org/IWCFService/CreateNewOfficeCallbackResponse")]
        string CreateNewOfficeCallback(Test.WCFService.OfficeRepresent officeRepresent, Test.WCFService.OfficeRepresent to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/AddProductToOfficeCallback", ReplyAction="http://tempuri.org/IWCFService/AddProductToOfficeCallbackResponse")]
        string AddProductToOfficeCallback(Test.WCFService.OfficeProductsRepresent[] officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/CreateNewProductCallback", ReplyAction="http://tempuri.org/IWCFService/CreateNewProductCallbackResponse")]
        string CreateNewProductCallback(Test.WCFService.ProductRepresent productRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteProductFromOfficeCallback", ReplyAction="http://tempuri.org/IWCFService/DeleteProductFromOfficeCallbackResponse")]
        string DeleteProductFromOfficeCallback(Test.WCFService.OfficeProductsRepresent officeProductsRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/DeleteOfficeCallback", ReplyAction="http://tempuri.org/IWCFService/DeleteOfficeCallbackResponse")]
        string DeleteOfficeCallback(Test.WCFService.OfficeRepresent officeRepresent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindProductsByOfficeCallback", ReplyAction="http://tempuri.org/IWCFService/FindProductsByOfficeCallbackResponse")]
        Test.WCFService.OfficeProductsRepresent[] FindProductsByOfficeCallback(string orgName, string officeLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWCFService/FindOrgsCallback", ReplyAction="http://tempuri.org/IWCFService/FindOrgsCallbackResponse")]
        Test.WCFService.OfficeRepresent[] FindOrgsCallback(string orgName, string orgType);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWCFServiceChannel : Test.WCFService.IWCFService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WCFServiceClient : System.ServiceModel.DuplexClientBase<Test.WCFService.IWCFService>, Test.WCFService.IWCFService {
        
        public WCFServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public WCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public WCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public WCFServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int Connect() {
            return base.Channel.Connect();
        }
        
        public System.Threading.Tasks.Task<int> ConnectAsync() {
            return base.Channel.ConnectAsync();
        }
        
        public void Disconnect(int id) {
            base.Channel.Disconnect(id);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int id) {
            return base.Channel.DisconnectAsync(id);
        }
        
        public Test.WCFService.OfficeProductsRepresent[] FindProductsByOffice(string orgName, string officeLocation) {
            return base.Channel.FindProductsByOffice(orgName, officeLocation);
        }
        
        public System.Threading.Tasks.Task<Test.WCFService.OfficeProductsRepresent[]> FindProductsByOfficeAsync(string orgName, string officeLocation) {
            return base.Channel.FindProductsByOfficeAsync(orgName, officeLocation);
        }
        
        public Test.WCFService.OfficeRepresent[] FindOrgs(int id, string orgName, string orgType) {
            return base.Channel.FindOrgs(id, orgName, orgType);
        }
        
        public System.Threading.Tasks.Task<Test.WCFService.OfficeRepresent[]> FindOrgsAsync(int id, string orgName, string orgType) {
            return base.Channel.FindOrgsAsync(id, orgName, orgType);
        }
        
        public void CreateNewOffice(int id, Test.WCFService.OfficeRepresent officeRepresent, Test.WCFService.OfficeRepresent to) {
            base.Channel.CreateNewOffice(id, officeRepresent, to);
        }
        
        public System.Threading.Tasks.Task CreateNewOfficeAsync(int id, Test.WCFService.OfficeRepresent officeRepresent, Test.WCFService.OfficeRepresent to) {
            return base.Channel.CreateNewOfficeAsync(id, officeRepresent, to);
        }
        
        public void AddProductToOffice(int id, Test.WCFService.OfficeProductsRepresent[] officeProductsRepresent) {
            base.Channel.AddProductToOffice(id, officeProductsRepresent);
        }
        
        public System.Threading.Tasks.Task AddProductToOfficeAsync(int id, Test.WCFService.OfficeProductsRepresent[] officeProductsRepresent) {
            return base.Channel.AddProductToOfficeAsync(id, officeProductsRepresent);
        }
        
        public void CreateNewProduct(int id, Test.WCFService.ProductRepresent productRepresent) {
            base.Channel.CreateNewProduct(id, productRepresent);
        }
        
        public System.Threading.Tasks.Task CreateNewProductAsync(int id, Test.WCFService.ProductRepresent productRepresent) {
            return base.Channel.CreateNewProductAsync(id, productRepresent);
        }
        
        public void DeleteProductFromOffice(int id, Test.WCFService.OfficeProductsRepresent officeProductsRepresent) {
            base.Channel.DeleteProductFromOffice(id, officeProductsRepresent);
        }
        
        public System.Threading.Tasks.Task DeleteProductFromOfficeAsync(int id, Test.WCFService.OfficeProductsRepresent officeProductsRepresent) {
            return base.Channel.DeleteProductFromOfficeAsync(id, officeProductsRepresent);
        }
        
        public void DeleteOffice(int id, Test.WCFService.OfficeRepresent officeRepresent) {
            base.Channel.DeleteOffice(id, officeRepresent);
        }
        
        public System.Threading.Tasks.Task DeleteOfficeAsync(int id, Test.WCFService.OfficeRepresent officeRepresent) {
            return base.Channel.DeleteOfficeAsync(id, officeRepresent);
        }
    }
}
